<?php
/**
 * Darts module.
 *
 * @todo Add player management.
 */

/**
 * Implementation of hook_menu().
 *
 * @return array Menu items.
 */
function darts_menu() {
    return array(
        'darts' => array(
            'title' => 'Home',
            'description' => 'Darts frontpage.',
            'access arguments' => array('access content'),
            'page callback' => 'theme',
            'page arguments' => array('darts_frontpage'),
            'type' => MENU_CALLBACK
        ),
        'admin/darts' => array(
            'title' => 'Darts',
            'description' => 'Administer one of the darts competitions.',
            'position' => 'left',
            'access arguments' => array('access administration pages'),
            'page callback' => 'darts_admin_page'
        ),
        'admin/darts/players' => array(
            'title' => 'Players',
            'description' => 'Manage the players that can parttake in a competition.',
            // Note: this is almost the same as 'administer users', but we do not want to grant access to the user management system.
            'access arguments' => array('administer darts players'),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('darts_admin_players'),
            'weight' => -50
        ),
        'admin/darts/players/list' => array(
            'title' => 'List',
            'description' => 'List of current players.',
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -50
        ),
        'admin/darts/players/add' => array(
            'title' => 'Add player',
            'description' => 'Add a new player.',
            'access arguments' => array('administer darts players'),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('darts_player_edit'),
            'type' => MENU_LOCAL_TASK,
            'weight' => -49
        )
    );
}

/**
 * Implementation of hook_perm().
 */
function darts_perm() {
    return array('administer darts players');
}

/**
 * Implementation of hook_theme().
 */
function darts_theme() {
    return array(
        'darts_admin_players' => array(
            'arguments' => array('form' => null)
        ),
        'darts_frontpage' => array(
            'template' => 'frontpage'
        )
    );
}

/**
 * Implementation of hook_init().
 */
function darts_init() {
    drupal_add_css(drupal_get_path('module', 'darts').'/darts.css');
}

function darts_user($op, &$edit, &$account, $category = '') {
    if ($op == 'categories') {
        return array(
            array(
                'name' => 'darts',
                'title' => t('Darts'),
                'access callback' => 'user_access',
                'access arguments' => array('administer darts players')
            )
        );
    }
    if ($op == 'form' && $category == 'darts') {
        $form_state = array('values' => &$edit);
        return darts_player_edit($form_state, $account);
    }
    if ($op == 'validate' && $category == 'darts') {
        $form_state = array('values' => &$edit);
        darts_player_edit_validate(array(), $form_state);
    }
    if ($op == 'submit' && $category == 'darts') {
        unset($edit['role']);
        unset($edit['notify']);
    }
}

/**
 * Landing page for the Darts administration section.
 *
 * Displays a list of links to administrative functions.
 *
 * @return string Rendered HTML.
 */
function darts_admin_page() {
    $item = menu_get_item('admin/darts');
    $content = system_admin_menu_block($item);
    return theme('admin_block_content', $content);
}

function darts_admin_players($form_state) {
    $form = array();
    $players = array();

    $teams = false;
    // If darts_donhn module is enabled, get a list of teams that are active in the DONHN competition.
    if (function_exists('darts_donhn_get_teams')) {
        $teams = darts_donhn_get_teams();
    }
    if ($teams === false) {
        $teams = array();
    }

    $data = pager_query('SELECT u.uid, u.name FROM {users} u WHERE u.uid > 1 ORDER BY u.name ASC', 25);
    while (($player = db_fetch_object($data)) !== false) {
        $players[$player->uid] = '';
        $form['name'][$player->uid]['#value'] = theme('username', $player);
        // If darts_competition module is enabled, check if player is active in the local competition.
        if (function_exists('darts_competition_is_player')) {
            $form['competition'][$player->uid]['#value'] = darts_competition_is_player($player->uid) ? t('Yes') : t('No');
        }
        foreach ($teams as $team_id => $team_name) {
            $form['donhn'][$team_id][$player->uid]['#value'] = darts_donhn_team_is_player($team_id, $player->uid) ? t('Yes') : t('No');
        }
        $form['player_actions'][$player->uid]['#value'] = l(t('edit'), 'user/'.$player->uid.'/edit/darts');
    }

    $form['players'] = array(
        '#type' => 'checkboxes',
        '#options' => $players
    );

    $form['pager'] = theme('pager', 25);

    $form['actions'] = array(
        '#type' => 'fieldset',
        '#title' => t('With selected players'),
        '#prefix' => '<div class="container-inline">',
        '#suffix' => '</div>',
    );
    $actions = array(
        '' => t('Select an action...')
    );
    foreach (module_invoke_all('player_operations') as $action => $details) {
        $actions[$action] = $details['label'];
    }
    $form['actions']['action'] = array(
        '#type' => 'select',
        '#options' => $actions,
        '#default_value' => '',
    );
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Apply')
    );

    return $form;
}

function darts_admin_players_validate($form, &$form_state) {
    $form_state['values']['players'] = array_filter($form_state['values']['players']);
    if (empty($form_state['values']['players'])) {
        form_set_error('', t('No players selected. Please select players first.'));
    }
    if (empty($form_state['values']['action'])) {
        form_set_error('actions][action', t('No action selected. Please select an action.'));
    }
}

function darts_admin_players_submit($form, &$form_state) {
    $actions = module_invoke_all('player_operations', $form_state);
    $action = $actions[$form_state['values']['action']];

    $args = array($form_state['values']['players']);
    if (isset($action['callback arguments']) && is_array($action['callback arguments'])) {
        $args = array_merge($args, $action['callback arguments']);
    }

    call_user_func_array($action['callback'], $args);

    drupal_set_message(t('The selected action was successfully applied to the selected players.'));
}

function theme_darts_admin_players($form) {
    $header = array(
        theme('table_select_header_cell'),
        t('Name')
    );

    if (is_array($form['competition'])) {
        $header[] = t('Competition');
    }
    if (is_array($form['donhn']) && !empty($form['donhn'])) {
        foreach (element_children($form['donhn']) as $team_id) {
            $team = darts_donhn_team_load($team_id);
            $header[] = check_plain($team['team_name']);
        }
    }

    $header[] = t('Actions');

    if (is_array($form['players']) && !empty($form['players'])) {
        foreach (element_children($form['players']) as $uid) {
            $row = array(
                drupal_render($form['players'][$uid]),
                drupal_render($form['name'][$uid])
            );
            if (is_array($form['competition']) && !empty($form['competition'])) {
                $row[] = drupal_render($form['competition'][$uid]);
            }
            if (is_array($form['donhn']) && !empty($form['donhn'])) {
                foreach (element_children($form['donhn']) as $team_id) {
                    $row[] = drupal_render($form['donhn'][$team_id][$uid]);
                }
            }
            $row[] = drupal_render($form['player_actions'][$uid]);
            $rows[] = $row;
        }
    }

    $content = theme('table', $header, $rows);
    $content .= drupal_render($form);

    return $content;
}

/**
 * Retrieves the list of (potential) players.
 *
 * @param bool $include_empty Include a placeholder item.
 * @return array List of players.
 */
function darts_get_players ($include_empty = false) {
    $data = db_query('SELECT uid, name FROM {users} WHERE uid > 1 ORDER BY name ASC');

    $players = array();

    if ($include_empty) {
        $players[0] = t('Select a player...');
    }

    while (($player = db_fetch_object($data)) !== false) {
        $players[$player->uid] = check_plain($player->name);
    }

    return $players;
}

function template_preprocess_darts_frontpage(&$variables) {
    $blocks = array(
        'views' => array('latest_news-block_1'),
        'events' => array('upcoming'),
        'darts_donhn' => array('results'),
        'darts_competition' => array('ranking'),
        'opengraph' => array('information'),
    );

    foreach ($blocks as $module => $deltas) {
        foreach ($deltas as $delta) {
            $data = module_invoke($module, 'block', 'view', $delta);
            if ($data === false || empty($data['content'])) {
                drupal_set_message(t('Failed to load block %block', array('%block' => $module.'-'.$delta)), 'warning');
                continue;
            }
            $block = (object) $data;
            $block->module = $module;
            $block->delta = $delta;
            $delta = str_replace('-','_', $delta);
            $variables['block_'.$module.'_'.$delta] = theme('block', $block);
        }
    }
}

function darts_player_edit($form_state = array(), $player = null) {
    $form = array();
    $roles = array(
        0 => t('Player'),
        variable_get('darts_role_club_manager', 0) => t('Club manager'),
        variable_get('darts_role_competition_manager', 0) => t('Competition manager'),
        variable_get('darts_role_donhn_manager', 0) => t('DONHN manager')
    );

    if (is_object($player)) {
        foreach(array_keys($roles) as $rid) {
            if (isset($player->roles[$rid])) {
                $player->role = $rid;
            }
        }
    }

    $form['uid'] = array(
        '#type' => 'value',
        '#value' => is_object($player) ? $player->uid : 0
    );

    $form['notify'] = array(
        '#type' => 'value',
        '#value' => !is_object($player)
    );

    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Naam'),
        '#maxlength' => USERNAME_MAX_LENGTH,
        '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, and underscores.'),
        '#default_value' => is_object($player) ? $player->name : '',
        '#disabled' => !user_access('administer darts players'),
        '#required' => true,
        '#weight' => -50
    );

    $form['role'] = array(
        '#type' => 'select',
        '#title' => t('Role'),
        '#options' => $roles,
        '#default_value' => is_object($player) ? $player->role : 0,
        '#required' => true,
        '#weight' => -45
    );

    $form['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail address'),
        '#description' => t('The e-mail address on which the player can be contacted. Note: this is only required for players that have additional permissions.'),
        '#default_value' => is_object($player) ? $player->mail : '',
        '#weight' => -40
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => is_object($player) ? t('Save player') : t('Create player')
    );
    
    return $form;
}

function darts_player_edit_validate($form, &$form_state) {
    if ($message = user_validate_name($form_state['values']['name'])) {
        form_set_error('name', $message);
    }

    switch($form_state['values']['role']) {
        case 0:
            // User is player, unset roles.
            $form_state['values']['roles'] = array();
            break;
        default:
            // User has elevated rights, assign role.
            $form_state['values']['roles'] = array($form_state['values']['role'] => true);
            if ($message = user_validate_mail($form_state['values']['mail'])) {
                form_set_error('mail', $message);
            }
            break;
    }
}

function darts_player_edit_submit($form, &$form_state) {
    $data = $form_state['values'];
    unset($data['uid']);
    unset($data['role']);
    unset($data['notify']);
    
    $data['status'] = true;
    $data['password'] = user_password();
    if (empty($data['mail'])) {
        $data['mail'] = 'no-reply@mosquito-darts.nl';
    }

    $account = user_save(null, $data);
    if ($account === false) {
        drupal_set_message(t('Could not save player.'), 'error');
        drupal_goto('admin/darts/players/add');
    }

    if ($form_state['values']['notify'] && $form_state['values']['role'] > 0) {
        _user_mail_notify('register_admin_created', $account);
        drupal_set_message(t('Password and further instructions have been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
    }
    else {
        drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
    }

    watchdog('darts', 'New user: %name (%email).', array('%name' => $account->name, '%email' => $account->mail), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

    drupal_goto('admin/darts/players');
}